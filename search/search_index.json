{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Welcome to the Frangipane documentation site. Frangipane Team is a french team. We are working on lots of projects based on Go language.</p> <p>This site contains documentation for the following projects</p>"},{"location":"#terraform","title":"Terraform","text":"<ul> <li> Terraform SuperSchema - SuperSchema is a library for generating Terraform resource and data source schemas.</li> <li> Terraform PlanModifiers - A collection of PlanModifiers for use with the Terraform Plugin Framework.</li> <li> Terraform Validators - A collection of validators for use with the Terraform Plugin Framework.</li> </ul>"},{"location":"terraform/superschema/datasource_example/","title":"cloudavenue_iam_user (Data Source)","text":"<p>The user data source allows you to read users in Cloud Avenue.</p>"},{"location":"terraform/superschema/datasource_example/#schema","title":"Schema","text":""},{"location":"terraform/superschema/datasource_example/#optional","title":"Optional","text":"<ul> <li><code>id</code> (String) The ID of the user. Ensure that one and only one attribute from this collection is set : <code>name</code>, <code>id</code>.</li> <li><code>name</code> (String) The name of the user. Ensure that one and only one attribute from this collection is set : <code>name</code>, <code>id</code>.</li> </ul>"},{"location":"terraform/superschema/datasource_example/#read-only","title":"Read-Only","text":"<ul> <li><code>role_name</code> (String) The role assigned to the user.</li> </ul>"},{"location":"terraform/superschema/getting-started/","title":"Getting Started","text":"<p>The following is a technical documentation on how to use superschema in your Terraform project.</p>"},{"location":"terraform/superschema/getting-started/#installation","title":"Installation","text":"<p>For installing the superschema, you can use the <code>go get</code> command:</p> <pre><code>go get github.com/FrangipaneTeam/terraform-plugin-framework-superschema@latest\n</code></pre>"},{"location":"terraform/superschema/getting-started/#how-to-use-it","title":"How to use it","text":"<p>Add to you golang imports :</p> <p><pre><code>import (\nsuperschema \"github.com/FrangipaneTeam/terraform-plugin-framework-superschema\"\n)\n</code></pre> Create, for example, a function witch define the superschema of your resource :</p> <pre><code>/*\nuserSchema\nThis function is used to create the schema for the user resource and datasource.\n*/\nfunc userSchema() superschema.Schema {\nreturn superschema.Schema{\nCommon: superschema.SchemaDetails{\nMarkdownDescription: \"The user\",\n},\nResource: superschema.SchemaDetails{\nMarkdownDescription: \"resource allows you to manage local users in Cloud Avenue.\",\n},\nDataSource: superschema.SchemaDetails{\nMarkdownDescription: \"data source allows you to read users in Cloud Avenue.\",\n},\nAttributes: map[string]superschema.Attribute{\n\"id\": superschema.StringAttribute{\nCommon: &amp;schemaR.StringAttribute{\nMarkdownDescription: \"The ID of the user.\",\n},\nResource: &amp;schemaR.StringAttribute{\nComputed: true,\nPlanModifiers: []planmodifier.String{\nstringplanmodifier.UseStateForUnknown(),\n},\n},\nDataSource: &amp;schemaD.StringAttribute{\nOptional: true,\nComputed: true,\nValidators: []validator.String{\nstringvalidator.ExactlyOneOf(path.MatchRoot(\"name\"), path.MatchRoot(\"id\")),\n},\n},\n},\n\"name\": superschema.StringAttribute{\nCommon: &amp;schemaR.StringAttribute{\nMarkdownDescription: \"The name of the user.\",\n},\nResource: &amp;schemaR.StringAttribute{\nRequired: true,\nPlanModifiers: []planmodifier.String{\nstringplanmodifier.RequiresReplace(),\n},\n},\nDataSource: &amp;schemaD.StringAttribute{\nOptional: true,\nComputed: true,\nValidators: []validator.String{\nstringvalidator.ExactlyOneOf(path.MatchRoot(\"name\"), path.MatchRoot(\"id\")),\n},\n},\n},\n\"role_name\": superschema.StringAttribute{\nCommon: &amp;schemaR.StringAttribute{\nMarkdownDescription: \"The role assigned to the user.\",\n},\nResource: &amp;schemaR.StringAttribute{\nRequired: true,\n},\nDataSource: &amp;schemaD.StringAttribute{\nComputed: true,\n},\n},\n\"password\": superschema.StringAttribute{\nResource: &amp;schemaR.StringAttribute{\nMarkdownDescription: \"The user's password. This value is never returned on read.\",\nRequired:            true,\nSensitive:           true,\n},\n},\n\"vdc_group\": superschema.StringAttribute{\nDeprecated: &amp;superschema.Deprecated{\nDeprecationMessage:                \"Remove the vdc_group attribute configuration as it replaced by the resource cloudavenue_vdc_group and the attribute will be removed in the version 0.12.0 of the provider.\",\nComputeMarkdownDeprecationMessage: true,\nRemoved:                           true,\nFromAttributeName:                 \"vdc_group\",\nTargetRelease:                     \"v0.12.0\",\nLinkToMilestone:                   \"https://github.com/orange-cloudavenue/terraform-provider-cloudavenue/milestone/4\",\nTargetResourceName:                \"cloudavenue_vdc_group\",\nLinkToResourceDoc:                 \"https://registry.terraform.io/providers/orange-cloudavenue/cloudavenue/latest/docs/resources/vdc_group\",\nLinkToIssue:                       \"https://github.com/orange-cloudavenue/terraform-provider-cloudavenue/issues/448\",\n},\nResource: &amp;schemaR.StringAttribute{\nMarkdownDescription: \"This can be an existing vDC group or a new one. This allows you to isolate your vDC.\\n\" +\n\"VMs of vDCs which belong to the same vDC group can communicate together.\",\nOptional: true,\nPlanModifiers: []planmodifier.String{\nstringplanmodifier.RequiresReplaceIfConfigured(),\n},\n},\n},\n},\n}\n}\n</code></pre> <p>Look at the doc example for the generated documentation of this example :</p> <ul> <li>Resource documentation</li> <li>DataSource documentation</li> </ul>"},{"location":"terraform/superschema/logic/","title":"SuperSchema logic","text":""},{"location":"terraform/superschema/logic/#superschemaschema","title":"superschema.Schema","text":"<p>The superschema.Schema type has three fields: <code>Common</code>, <code>Resource</code>, and <code>DataSource</code>. By using these fields, you can set the description header of your Terraform resource and datasource. The superschema merges the common markdown description with the resource markdown description for the Terraform resource and the common markdown description with the datasource markdown description for the Terraform datasource.</p> <p>There is no need to add extra space in the markdown description. The superschema automatically adds necessary space on the merged markdown description. This same logic applies for DeprecationMessage.</p>"},{"location":"terraform/superschema/logic/#attributes","title":"Attributes","text":"<p>On the attributes side, the same logic applies for the <code>MarkdownDescription</code>, <code>Description</code>, and <code>DeprecationMessage</code>. If any of the <code>Computed</code>, <code>Required</code>, <code>Optional</code>, and <code>Sensitive</code> fields is <code>true</code> in <code>Common</code>, <code>Resource</code>, or <code>DataSource</code>, the value is <code>true</code>.</p> <p>Examples:</p> <ul> <li>If <code>Required</code> is <code>true</code> in <code>Common</code> and <code>false</code> in <code>Resource</code>, the result is a <code>Required: true</code> for the <code>Resource</code>.</li> <li>If <code>Required</code> is <code>false</code> in <code>Common</code> and <code>true</code> in <code>DataSource</code>, the result is a <code>Required: true</code> for the <code>DataSource</code>.</li> </ul>"},{"location":"terraform/superschema/logic/#validators","title":"Validators","text":"<p>The <code>Validators</code> are the sum of the <code>Common</code> and <code>Resource</code> or <code>DataSource</code> Validators. The validator markdown description is added to the markdown description of your attribute.</p>"},{"location":"terraform/superschema/logic/#planmodifiers","title":"PlanModifiers","text":"<p>The <code>PlanModifiers</code> are the sum of the <code>Common</code> and <code>Resource</code> or <code>DataSource</code> PlanModifiers. The plan modifier markdown description is added to the markdown description of your attribute with the following exceptions:</p> <ul> <li><code>UseStateForUnknown</code>: nothing is added.</li> <li><code>RequiresReplace</code>: <code>(ForceNew)</code> is added at the beginning of the markdown description.</li> </ul>"},{"location":"terraform/superschema/logic/#default-value","title":"Default Value","text":"<p>If you have a default value, the markdown description is ended with the markdown description of this default.</p>"},{"location":"terraform/superschema/logic/#deprecationmessage","title":"DeprecationMessage","text":"<p>The <code>DeprecationMessage</code> is the special field of the superschema. Is used to manage deprecation of attributes. List of possible values:</p> <pre><code>    // DeprecationMessage is the message to display in the CLI when the user\n// attempts to use the deprecated attribute.\n// This field is required.\nDeprecationMessage string\n// MarkdownDeprecationMessage is the message to display in the Documentation portal\n// when the user attempts to use the deprecated attribute.\n// This field is optional if ComputeMarkdownDeprecationMessage is false.\nMarkdownDeprecationMessage string\n// ComputeMarkdownDeprecationMessage is a flag to indicate whether the MarkdownDeprecationMessage\n// should be computed from the parameters of the Deprecated struct.\nComputeMarkdownDeprecationMessage bool\n// Renamed is a flag to indicate whether the attribute has been renamed.\n// Removed is a flag to indicate whether the attribute has been removed.\n// One of these fields must be true.\nRenamed, Removed bool\n// FromAttributeName is the name of the attribute that has been deprecated.\n// This field is required if ComputeMarkdownDeprecationMessage is true.\nFromAttributeName string\n// TargetAttributeName is the name of the attribute that replaces the deprecated attribute.\n// TargetResourceName is the name of the resource that replaces the deprecated attribute.\n// These fields are optional if the attribute has been removed.\nTargetAttributeName, TargetResourceName string\n// TargetRelease is the release version in which the attribute was deprecated. (e.g. v1.0.0).\n// This field is Required.\nTargetRelease string\n// LinkToIssue is the link to the GitHub issue that describes the deprecation.\n// This field is optional.\nLinkToIssue string\n// LinkToResourceDoc is the link to the terraform documentation for the resource that replaces the deprecated attribute.\n// This field is optional.\nLinkToResourceDoc string\n// LinkToMilestone is the link to the GitHub milestone that describes the release in which the attribute was deprecated.\n// This field is optional.\nLinkToMilestone string\n</code></pre>"},{"location":"terraform/superschema/resource_example/","title":"cloudavenue_iam_user (Resource)","text":"<p>The user resource allows you to manage local users in Cloud Avenue.</p>"},{"location":"terraform/superschema/resource_example/#schema","title":"Schema","text":""},{"location":"terraform/superschema/resource_example/#required","title":"Required","text":"<ul> <li><code>name</code> (String) (ForceNew) The name of the user.</li> <li><code>password</code> (String, Sensitive) The user's password. This value is never returned on read.</li> <li><code>role_name</code> (String) The role assigned to the user.</li> </ul>"},{"location":"terraform/superschema/resource_example/#optional","title":"Optional","text":"<ul> <li><code>vdc_group</code> (String, Deprecated) (ForceNew) vDC group name. This can be an existing vDC group or a new one. This allows you to isolate your vDC. VMs of vDCs which belong to the same vDC group can communicate together.</li> </ul> <p>Attribute deprecated</p> <p>Remove the <code>vdc_group</code> attribute configuration as it replaced by the resource <code>cloudavenue_vdc_group</code> and the attribute will be removed in the version <code>v0.12.0</code> of the provider. See the GitHub issue for more information.</p>"},{"location":"terraform/superschema/resource_example/#read-only","title":"Read-Only","text":"<ul> <li><code>id</code> (String) The ID of the user.</li> </ul>"},{"location":"terraform/superschema/why/","title":"Why ?","text":"<p>SuperSchema allows you to write the Terraform schema for resources and datasources in a single definition, along with a common field that enables you to define default values. SuperSchema is compatible with tfplugindocs.</p> <p>This is a try to solve these issues :</p> <ul> <li>Don't repeat yourself : common fields applied on resources and datasources.</li> <li>Auto format attributes markdown description with validators and plan modifiers descriptions, default values...</li> <li>Auto generate deprecated documentation for deprecated attributes.</li> </ul>"},{"location":"terraform/planmodifiers/","title":"Overview","text":"<p>Welcome to the FrangipaneTeam Terraform Framework Plan Modifiers documentation site This repository contains a collections of plan modifiers for the Terraform Plugin Framework.</p>"},{"location":"terraform/planmodifiers/#plan-modifiers","title":"Plan Modifiers","text":"<ul> <li>StringPlanModifiers</li> <li>BoolPlanModifiers</li> <li>Int64PlanModifiers</li> </ul>"},{"location":"terraform/planmodifiers/getting-started/","title":"Getting Started","text":""},{"location":"terraform/planmodifiers/getting-started/#installation","title":"Installation","text":"<p>For installing the plan modifiers, you can use the <code>go get</code> command:</p> <pre><code>go get github.com/FrangipaneTeam/terraform-plugin-framework-planmodifiers@latest\n</code></pre>"},{"location":"terraform/planmodifiers/boolplanmodifier/","title":"Bool Plan Modifiers","text":"<p>Bool plan modifiers are used to modify the plan of a bool attribute. I will be used into the <code>PlanModifiers</code> field of the <code>schema.BoolAttribute</code> struct.</p>"},{"location":"terraform/planmodifiers/boolplanmodifier/#how-to-use-it","title":"How to use it","text":"<pre><code>import (\nfboolplanmodifier \"github.com/FrangipaneTeam/terraform-plugin-framework-planmodifiers/boolplanmodifier\"\n)\n</code></pre>"},{"location":"terraform/planmodifiers/boolplanmodifier/#list-of-plan-modifiers","title":"List of Plan Modifiers","text":"<ul> <li><code>SetDefault</code> - Sets a default value for the attribute.</li> <li><code>SetDefaultEnvVar</code> - Sets a default value for the attribute from an environment variable.</li> <li><code>SetDefaultFunc</code> - Sets a default value for the attribute from a function.</li> </ul>"},{"location":"terraform/planmodifiers/boolplanmodifier/#requirereplace","title":"RequireReplace","text":"<ul> <li><code>RequireReplaceIfBool</code> - Forces the resource to be replaced when the specified boolean attribute is changed.</li> </ul>"},{"location":"terraform/planmodifiers/boolplanmodifier/requirereplaceifbool/","title":"<code>RequireReplaceIfBool</code>","text":"<p>This plan modifier is used to require a resource to be replaced if a boolean attribute is set to a expected value.</p>"},{"location":"terraform/planmodifiers/boolplanmodifier/requirereplaceifbool/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"enabled\": schema.StringAttribute{\nOptional:            true,\nMarkdownDescription: \"Enable or disable ...\",\nPlanModifiers: []planmodifier.String{\nfboolplanmodifier.RequireReplaceIfBool(path.Root(\"force\"), true)\n},\n\"force\": schema.Int64Attribute{\nOptional:            true,\nMarkdownDescription: \"Force the resource ...\",\n},\n</code></pre>"},{"location":"terraform/planmodifiers/boolplanmodifier/setdefault/","title":"<code>SetDefault</code>","text":"<p>This plan modifier is used to set a default value for a boolean attribute.</p>"},{"location":"terraform/planmodifiers/boolplanmodifier/setdefault/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"enabled\": schema.StringAttribute{\nOptional:            true,\nMarkdownDescription: \"Enable or disable ...\",\nPlanModifiers: []planmodifier.String{\nfboolplanmodifier.SetDefault(true),\n},\n},\n</code></pre>"},{"location":"terraform/planmodifiers/boolplanmodifier/setdefaultenvvar/","title":"<code>SetDefaultEnvVar</code>","text":"<p>This plan modifier is used to set a default value for a boolean from an environment variable.</p>"},{"location":"terraform/planmodifiers/boolplanmodifier/setdefaultenvvar/#how-to-use-it","title":"How to use it","text":"<pre><code>export CAV_VAR_DEFAULT_NAME=\"true\"\n</code></pre> <pre><code>// Schema defines the schema for the resource.\nfunc (r *vappResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"enabled\": schema.BoolAttribute{\nOptional:            true,\nMarkdownDescription: \"\",\nPlanModifiers: []planmodifier.Bool{\nfboolplanmodifier.SetDefaultEnvVar(\"CAV_VAR_DEFAULT_NAME\"),\n},\n},\n</code></pre>"},{"location":"terraform/planmodifiers/boolplanmodifier/setdefaultfunc/","title":"<code>SetDefaultFunc</code>","text":"<p>This plan modifier is used to set a default value for a boolean using a custom function.</p>"},{"location":"terraform/planmodifiers/boolplanmodifier/setdefaultfunc/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"enabled\": schema.BoolAttribute{\nOptional:            true,\nMarkdownDescription: \"Enable or disable ...\",\nPlanModifiers: []planmodifier.Bool{\nfboolplanmodifier.SetDefaultFunc(fboolplanmodifier.DefaultFunc(func(ctx context.Context, req planmodifier.BoolRequest, resp *fboolplanmodifier.DefaultFuncResponse) {\nif os.Getenv(\"CAV_VAR_1\") == \"foo\" &amp;&amp; os.Getenv(\"CAV_VAR_2\") == \"bar\" {\nresp.Value = true\nreturn\n}\n})),\n},\n},\n</code></pre>"},{"location":"terraform/planmodifiers/int64planmodifier/","title":"Int64 Plan Modifiers","text":"<p>BoInt64ol plan modifiers are used to modify the plan of a int64 attribute. I will be used into the <code>PlanModifiers</code> field of the <code>schema.Int64Attribute</code> struct.</p>"},{"location":"terraform/planmodifiers/int64planmodifier/#how-to-use-it","title":"How to use it","text":"<pre><code>import (\nfint64planmodifier \"github.com/FrangipaneTeam/terraform-plugin-framework-planmodifiers/int64planmodifier\"\n)\n</code></pre>"},{"location":"terraform/planmodifiers/int64planmodifier/#list-of-plan-modifiers","title":"List of Plan Modifiers","text":"<ul> <li><code>SetDefault</code> - Sets a default value for the attribute.</li> <li><code>SetDefaultEnvVar</code> - Sets a default value for the attribute from an environment variable.</li> <li><code>SetDefaultFunc</code> - Sets a default value for the attribute from a function.</li> </ul>"},{"location":"terraform/planmodifiers/int64planmodifier/#requirereplace","title":"RequireReplace","text":"<ul> <li><code>RequireReplaceIfBool</code> - Forces the resource to be replaced when the specified boolean attribute is changed.</li> </ul>"},{"location":"terraform/planmodifiers/int64planmodifier/requirereplaceifbool/","title":"<code>RequireReplaceIfBool</code>","text":"<p>This plan modifier is used to require a resource to be replaced if a boolean attribute is set to a expected value.</p>"},{"location":"terraform/planmodifiers/int64planmodifier/requirereplaceifbool/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"disk_size\": schema.Int64Attribute{\nOptional:            true,\nMarkdownDescription: \"The size of the disk in MB.\",\nPlanModifiers: []planmodifier.Int64{\nfint64planmodifier.RequireReplaceIfBool(path.Root(\"enabled\"), true)\n},\n},\n\"enabled\": schema.BoolAttribute{\nOptional:            true,\nMarkdownDescription: \"Enable or disable ...\",\n},\n</code></pre>"},{"location":"terraform/planmodifiers/int64planmodifier/setdefault/","title":"<code>SetDefault</code>","text":"<p>This plan modifier is used to set a default value for a int64 attribute.</p>"},{"location":"terraform/planmodifiers/int64planmodifier/setdefault/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"disk_size\": schema.Int64Attribute{\nOptional:            true,\nMarkdownDescription: \"The size of the disk in MB.\",\nPlanModifiers: []planmodifier.Int64{\nfint64planmodifier.SetDefault(100),\n},\n},\n</code></pre>"},{"location":"terraform/planmodifiers/int64planmodifier/setdefaultenvvar/","title":"<code>SetDefaultEnvVar</code>","text":"<p>This plan modifier is used to set a default value for a int64 from an environment variable.</p>"},{"location":"terraform/planmodifiers/int64planmodifier/setdefaultenvvar/#how-to-use-it","title":"How to use it","text":"<pre><code>export CAV_VAR_DEFAULT_DISK_SIZE=\"100\"\n</code></pre> <pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"disk_size\": schema.Int64Attribute{\nOptional:            true,\nMarkdownDescription: \"The size of the disk in MB.\",\nPlanModifiers: []planmodifier.Int64{\nfint64planmodifier.SetDefaultEnvVar(\"CAV_VAR_DEFAULT_DISK_SIZE\"),\n},\n},\n</code></pre>"},{"location":"terraform/planmodifiers/int64planmodifier/setdefaultfunc/","title":"<code>SetDefaultFunc</code>","text":"<p>This plan modifier is used to set a default value for a int64 using a custom function.</p>"},{"location":"terraform/planmodifiers/int64planmodifier/setdefaultfunc/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"enabled\": schema.BoolAttribute{\nOptional:            true,\nMarkdownDescription: \"The size of the disk in MB.\",\nPlanModifiers: []planmodifier.Bool{\nfint64planmodifier.SetDefaultFunc(fint64planmodifier.DefaultFunc(func(ctx context.Context, req planmodifier.Int64Request, resp *fint64planmodifier.DefaultFuncResponse) {\nresp.Value = req.PlanValue * 1024\n})),\n},\n},\n</code></pre>"},{"location":"terraform/planmodifiers/stringplanmodifier/","title":"String Plan Modifiers","text":"<p>String plan modifiers are used to modify the plan of a string attribute. It will be used into the <code>PlanModifiers</code> field of the <code>schema.StringAttribute</code> struct.</p>"},{"location":"terraform/planmodifiers/stringplanmodifier/#how-to-use-it","title":"How to use it","text":"<pre><code>import (\nfstringplanmodifier \"github.com/FrangipaneTeam/terraform-plugin-framework-planmodifiers/stringplanmodifier\"\n)\n</code></pre>"},{"location":"terraform/planmodifiers/stringplanmodifier/#list-of-plan-modifiers","title":"List of Plan Modifiers","text":""},{"location":"terraform/planmodifiers/stringplanmodifier/#setdefault","title":"SetDefault","text":"<ul> <li><code>SetDefault</code> - Sets a default value for the attribute.</li> <li><code>SetDefaultEnvVar</code> - Sets a default value for the attribute from an environment variable.</li> <li><code>SetDefaultFunc</code> - Sets a default value for the attribute from a function.</li> <li><code>SetDefaultEmptyString</code> - Sets a empty string as default value for the attribute.</li> </ul>"},{"location":"terraform/planmodifiers/stringplanmodifier/#requirereplace","title":"RequireReplace","text":"<ul> <li><code>RequireReplaceIfBool</code> - Forces the resource to be replaced when the specified boolean attribute is changed.</li> </ul>"},{"location":"terraform/planmodifiers/stringplanmodifier/#stringchange","title":"StringChange","text":"<ul> <li><code>ToLower</code> - Converts the string to lowercase.</li> <li><code>ToUpper</code> - Converts the string to uppercase.</li> </ul>"},{"location":"terraform/planmodifiers/stringplanmodifier/requirereplaceifbool/","title":"<code>RequireReplaceIfBool</code>","text":"<p>This plan modifier is used to require a resource to be replaced if a boolean attribute is set to a expected value.</p>"},{"location":"terraform/planmodifiers/stringplanmodifier/requirereplaceifbool/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"name\": schema.StringAttribute{\nOptional:            true,\nMarkdownDescription: \"A name for ...\",\nPlanModifiers: []planmodifier.String{\nfstringplanmodifier.RequireReplaceIfBool(path.Root(\"enabled\"), true)\n},\n},\n\"enabled\": schema.BoolAttribute{\nOptional:            true,\nMarkdownDescription: \"Enable or disable ...\",\n},\n</code></pre>"},{"location":"terraform/planmodifiers/stringplanmodifier/setdefault/","title":"<code>SetDefault</code>","text":"<p>This plan modifier is used to set a default value for a string attribute.</p>"},{"location":"terraform/planmodifiers/stringplanmodifier/setdefault/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"name\": schema.StringAttribute{\nOptional:            true,\nMarkdownDescription: \"A name for ...\",\nPlanModifiers: []planmodifier.String{\nfstringplanmodifier.SetDefault(\"default-name\"),\n},\n},\n</code></pre>"},{"location":"terraform/planmodifiers/stringplanmodifier/setdefaultemptystring/","title":"<code>SetDefaultEmptyString</code>","text":"<p>This plan modifier is used to set a default empty value for a string.</p>"},{"location":"terraform/planmodifiers/stringplanmodifier/setdefaultemptystring/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"name\": schema.StringAttribute{\nOptional:            true,\nMarkdownDescription: \"A name for ...\",\nPlanModifiers: []planmodifier.String{\nfstringplanmodifier.SetDefaultEmptyString(),\n},\n},\n</code></pre>"},{"location":"terraform/planmodifiers/stringplanmodifier/setdefaultenvvar/","title":"<code>SetDefaultEnvVar</code>","text":"<p>This plan modifier is used to set a default value for a string from an environment variable.</p>"},{"location":"terraform/planmodifiers/stringplanmodifier/setdefaultenvvar/#how-to-use-it","title":"How to use it","text":"<pre><code>export CAV_VAR_DEFAULT_NAME=\"default-name\"\n</code></pre> <pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"name\": schema.StringAttribute{\nOptional:            true,\nMarkdownDescription: \"A name for ...\",\nPlanModifiers: []planmodifier.String{\nfstringplanmodifier.SetDefaultEnvVar(\"CAV_VAR_DEFAULT_NAME\"),\n},\n},\n</code></pre>"},{"location":"terraform/planmodifiers/stringplanmodifier/setdefaultfunc/","title":"<code>SetDefaultFunc</code>","text":"<p>This plan modifier is used to set a default value for a string using a custom function.</p>"},{"location":"terraform/planmodifiers/stringplanmodifier/setdefaultfunc/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"name\": schema.StringAttribute{\nOptional:            true,\nMarkdownDescription: \"A name for ...\",\nPlanModifiers: []planmodifier.String{\nfstringplanmodifier.SetDefaultFunc(fstringplanmodifier.DefaultFunc(func(ctx context.Context, req planmodifier.StringRequest, resp *fstringplanmodifier.DefaultFuncResponse) {\nif strings.Contains(req.PlanValue, \"foo\") {\nresp.Value = \"bar\"\nreturn\n}\n})),\n},\n},\n</code></pre>"},{"location":"terraform/planmodifiers/stringplanmodifier/tolower/","title":"<code>ToLower</code>","text":"<p>This plan modifier is used to force the string to be lowercase.</p>"},{"location":"terraform/planmodifiers/stringplanmodifier/tolower/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"name\": schema.StringAttribute{\nOptional:            true,\nMarkdownDescription: \"A name for ...\",\nPlanModifiers: []planmodifier.String{\nfstringplanmodifier.ToLower(),\n},\n},\n</code></pre> main.tf<pre><code>resource \"resource_x\" \"example\" {\nname = \"FOO\"\n}\n</code></pre> terraform.tfstate<pre><code>{\n\"version\": 4,\n\"terraform_version\": \"1.0.0\",\n\"resources\": [\n{\n\"mode\": \"managed\",\n\"type\": \"resource_x\",\n\"name\": \"example\",\n\"provider\": \"provider[\\\"registry.terraform.io/hashicorp/x\\\"]\",\n\"instances\": [\n{\n\"schema_version\": 0,\n\"attributes\": {\n\"id\": \"example\",\n\"name\": \"foo\",\n},\n},\n],\n},\n],\n}\n</code></pre>"},{"location":"terraform/planmodifiers/stringplanmodifier/toupper/","title":"<code>ToUpper</code>","text":"<p>This plan modifier is used to force the string to be uppercase.</p>"},{"location":"terraform/planmodifiers/stringplanmodifier/toupper/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"name\": schema.StringAttribute{\nOptional:            true,\nMarkdownDescription: \"A name for ...\",\nPlanModifiers: []planmodifier.String{\nfstringplanmodifier.ToUpper(),\n},\n},\n</code></pre> main.tf<pre><code>resource \"resource_x\" \"example\" {\nname = \"foo\"\n}\n</code></pre> terraform.tfstate<pre><code>{\n\"version\": 4,\n\"terraform_version\": \"1.0.0\",\n\"resources\": [\n{\n\"mode\": \"managed\",\n\"type\": \"resource_x\",\n\"name\": \"example\",\n\"provider\": \"provider[\\\"registry.terraform.io/hashicorp/x\\\"]\",\n\"instances\": [\n{\n\"schema_version\": 0,\n\"attributes\": {\n\"id\": \"example\",\n\"name\": \"FOO\",\n},\n},\n],\n},\n],\n}\n</code></pre>"},{"location":"terraform/validators/","title":"Overview","text":"<p>Welcome to the FrangipaneTeam Terraform Framework Validators documentation site This repository contains a collections of validators for the Terraform Plugin Framework.</p>"},{"location":"terraform/validators/#validators","title":"Validators","text":"<ul> <li>StringValidator</li> <li>BoolValidator</li> <li>Int64Validator</li> <li>ListValidator</li> <li>SetValidator</li> <li>MapValidator</li> </ul>"},{"location":"terraform/validators/getting-started/","title":"Getting Started","text":""},{"location":"terraform/validators/getting-started/#installation","title":"Installation","text":"<p>For installing the validators, you can use the <code>go get</code> command:</p> <pre><code>go get github.com/FrangipaneTeam/terraform-plugin-framework-validators@latest\n</code></pre>"},{"location":"terraform/validators/boolvalidator/","title":"BoolValidator","text":"<p>Bool validator are used to validate the plan of a boolean attribute. It will be used into the <code>Validators</code> field of the <code>schema.BoolAttribute</code> struct.</p>"},{"location":"terraform/validators/boolvalidator/#how-to-use-it","title":"How to use it","text":"<pre><code>import (\nfboolvalidator \"github.com/FrangipaneTeam/terraform-plugin-framework-validators/boolvalidator\"\n)\n</code></pre>"},{"location":"terraform/validators/boolvalidator/#list-of-validators","title":"List of Validators","text":"<ul> <li><code>RequireIfAttributeIsOneOf</code> - This validator is used to require the attribute if another attribute is one of the given values.</li> <li><code>RequireIfAttributeIsSet</code> - This validator is used to require the attribute if another attribute is set.</li> <li><code>NullIfAttributeIsOneOf</code> - This validator is used to verify the attribute value is null if another attribute is one of the given values.</li> <li><code>NullIfAttributeIsSet</code> - This validator is used to verify the attribute value is null if another attribute is set.</li> </ul>"},{"location":"terraform/validators/boolvalidator/#special","title":"Special","text":"<ul> <li><code>Not</code> - This validator is used to negate the result of another validator.</li> </ul>"},{"location":"terraform/validators/boolvalidator/not/","title":"<code>Not</code>","text":"<p>Released in v1.0.0</p> <p>This validator is used to check if the validators passed as arguments are NOT met.</p>"},{"location":"terraform/validators/boolvalidator/not/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"ip\": schema.StringAttribute{\nOptional:            true,\nMarkdownDescription: \"Ip Address ...\",\nValidators: []validator.String{\nfstringvalidator.Not(fstringvalidator.IsValidIP())\n},\n},\n</code></pre>"},{"location":"terraform/validators/common/null_if_attribute_is_one_of/","title":"<code>NullIfAttributeIsOneOf</code>","text":"<p>Released in v1.6.0</p> <p>This validator is used to verify the attribute value is null if another attribute is one of the given values.</p>"},{"location":"terraform/validators/common/null_if_attribute_is_one_of/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"network_type\": schema.StringAttribute{\nOptional:            true,\nMarkdownDescription: \"Network type ...\",\nValidators: []validator.String{\nfstringvalidator.OneOf(\"public\", \"private\"),\n},\n},\n\"enabled\": schema.BoolAttribute{\nOptional:            true,\nMarkdownDescription: \"Enable ...\",\nValidators: []validator.Bool{\nfboolvalidator.NullIfAttributeIsOneOf(path.MatchRoot(\"network_type\"),[]attr.Value{types.StringValue(\"private\")})\n},\n},\n</code></pre>"},{"location":"terraform/validators/common/null_if_attribute_is_one_of/#example-of-generated-documentation","title":"Example of generated documentation","text":"<p>If the value of <code>network_type</code> attribute is <code>private</code> this attribute is NULL.</p>"},{"location":"terraform/validators/common/null_if_attribute_is_set/","title":"<code>NullIfAttributeIsSet</code>","text":"<p>Released in v1.8.0</p> <p>This validator is used to verify the attribute value is null if another attribute is set. Set could mean either the attribute is present in the configuration.</p>"},{"location":"terraform/validators/common/null_if_attribute_is_set/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"network_type\": schema.StringAttribute{\nOptional:            true,\nMarkdownDescription: \"Network type ...\",\nValidators: []validator.String{\nfstringvalidator.OneOf(\"public\", \"private\"),\n},\n},\n\"enabled\": schema.BoolAttribute{\nOptional:            true,\nMarkdownDescription: \"Enable ...\",\nValidators: []validator.Bool{\nfboolvalidator.NullIfAttributeIsSet(path.MatchRoot(\"network_type\"))\n},\n},\n</code></pre>"},{"location":"terraform/validators/common/null_if_attribute_is_set/#example-of-generated-documentation","title":"Example of generated documentation","text":"<p>If the value of <code>network_type</code> attribute is set this attribute is NULL.</p>"},{"location":"terraform/validators/common/require_if_attribute_is_one_of/","title":"<code>RequireIfAttributeIsOneOf</code>","text":"<p>Released in v1.3.0</p> <p>This validator is used to require the attribute if another attribute is one of the given values.</p>"},{"location":"terraform/validators/common/require_if_attribute_is_one_of/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"network_type\": schema.StringAttribute{\nOptional:            true,\nMarkdownDescription: \"Network type ...\",\nValidators: []validator.String{\nfstringvalidator.OneOf(\"public\", \"private\"),\n},\n},\n\"enabled\": schema.BoolAttribute{\nOptional:            true,\nMarkdownDescription: \"Enable ...\",\nValidators: []validator.String{\nfboolvalidator.RequireIfAttributeIsOneOf(path.MatchRoot(\"network_type\"),[]attr.Value{types.StringValue(\"private\")})\n},\n},\n</code></pre>"},{"location":"terraform/validators/common/require_if_attribute_is_one_of/#example-of-generated-documentation","title":"Example of generated documentation","text":"<p>If the value of <code>network_type</code> attribute is <code>private</code> this attribute is REQUIRED.</p>"},{"location":"terraform/validators/common/require_if_attribute_is_set/","title":"<code>RequireIfAttributeIsSet</code>","text":"<p>Released in v1.8.0</p> <p>This validator is used to require the attribute if another attribute is set. Set could mean either the attribute is present in the configuration.</p>"},{"location":"terraform/validators/common/require_if_attribute_is_set/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"network_type\": schema.StringAttribute{\nOptional:            true,\nMarkdownDescription: \"Network type ...\",\nValidators: []validator.String{\nfstringvalidator.OneOf(\"public\", \"private\"),\n},\n},\n\"enabled\": schema.BoolAttribute{\nOptional:            true,\nMarkdownDescription: \"Enable ...\",\nValidators: []validator.String{\nfboolvalidator.RequireIfAttributeIsSet(path.MatchRoot(\"network_type\"))\n},\n},\n</code></pre>"},{"location":"terraform/validators/common/require_if_attribute_is_set/#example-of-generated-documentation","title":"Example of generated documentation","text":"<p>If the value of <code>network_type</code> attribute is set this attribute is REQUIRED.</p>"},{"location":"terraform/validators/int64validator/","title":"Int64Validator","text":"<p>Int64 validator are used to validate the plan of a int64 attribute. It will be used into the <code>Validators</code> field of the <code>schema.Int64Attribute</code> struct.</p>"},{"location":"terraform/validators/int64validator/#how-to-use-it","title":"How to use it","text":"<pre><code>import (\nfint64validator \"github.com/FrangipaneTeam/terraform-plugin-framework-validators/int64validator\"\n)\n</code></pre>"},{"location":"terraform/validators/int64validator/#list-of-validators","title":"List of Validators","text":"<ul> <li><code>RequireIfAttributeIsOneOf</code> - This validator is used to require the attribute if another attribute is one of the given values.</li> <li><code>RequireIfAttributeIsSet</code> - This validator is used to require the attribute if another attribute is set.</li> <li><code>NullIfAttributeIsOneOf</code> - This validator is used to verify the attribute value is null if another attribute is one of the given values.</li> <li><code>NullIfAttributeIsSet</code> - This validator is used to verify the attribute value is null if another attribute is set.</li> <li><code>OneOfWithDescription</code> - This validator is used to check if the string is one of the given values and format the description and the markdown description.</li> <li><code>AttributeIsDivisibleByAnInteger</code> - This validator is used to validate that the attribute is divisible by an integer.</li> <li><code>ZeroRemainder</code> - This validator checks if the configured attribute is divisible by a specified integer X, and has zero remainder.</li> </ul>"},{"location":"terraform/validators/int64validator/#special","title":"Special","text":"<ul> <li><code>Not</code> - This validator is used to negate the result of another validator.</li> </ul>"},{"location":"terraform/validators/int64validator/attribute_is_divisible_by_an_integer/","title":"<code>AttributeIsDivisibleByAnInteger</code>","text":"<p>Released in v1.4.0</p> <p>This validator is used to check if the attribute is divisible by an integer.</p>"},{"location":"terraform/validators/int64validator/attribute_is_divisible_by_an_integer/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"cpus\": schema.Int64Attribute{\nOptional:            true,\nMarkdownDescription: \"Number of CPUs\",\n},\n\"cpus_cores\": schema.Int64Attribute{\nOptional:            true,\nMarkdownDescription: \"Number of CPUs cores\",\nValidators: []validator.Int64{\nfint64validator.AttributeIsDivisibleByAnInteger(path.MatchRoot(\"cpus\"))\n},\n},\n</code></pre>"},{"location":"terraform/validators/int64validator/not/","title":"<code>Not</code>","text":"<p>Released in v1.0.0</p> <p>This validator is used to check if the validators passed as arguments are NOT met.</p>"},{"location":"terraform/validators/int64validator/not/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"count\": schema.Int64Attribute{\nOptional:            true,\nMarkdownDescription: \"Count of ...\",\nValidators: []validator.Int64{\nfint64validator.Not(int64validator.Between(10,20))\n},\n},\n</code></pre>"},{"location":"terraform/validators/int64validator/oneofwithdescription/","title":"<code>OneOfWithDescription</code>","text":"<p>Released in v1.5.0</p> <p>This validator is used to check if the string is one of the given values and format the description and the markdown description.</p>"},{"location":"terraform/validators/int64validator/oneofwithdescription/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"interface_type\": schema.StringAttribute{\nOptional:            true,\nMarkdownDescription: \"Type of ...\",\nValidators: []validator.Int64{\nfint64validator.OneOfWithDescription(\nfint64validator.OneOfWithDescriptionValues{\nValue:       1,\nDescription: \"Vmware interface\",\n},\nfint64validator.OneOfWithDescriptionValues{\nValue:       2,\nDescription: \"Intel interface\",\n},\n)\n},\n},\n</code></pre>"},{"location":"terraform/validators/int64validator/oneofwithdescription/#description-and-markdown-description","title":"Description and Markdown description","text":"<ul> <li>Description: Value must be one of: \"1\" (Vmware interface), \"2\" (Intel interface)</li> <li>Markdown description: Value must be one of: <code>1</code> (Vmware interface), <code>2</code> (Intel interface)</li> </ul>"},{"location":"terraform/validators/int64validator/zero_remainder/","title":"<code>ZeroRemainder</code>","text":"<p>Released in v1.4.0</p> <p>This validator checks if the configured attribute is divisible by a specified integer X, and has zero remainder.</p>"},{"location":"terraform/validators/int64validator/zero_remainder/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"memory\": schema.Int64Attribute{\nOptional:            true,\nMarkdownDescription: \"Memory\",\nValidators: []validator.Int64{\nfint64validator.ZeroRemainder(4),\n},\n},\n</code></pre>"},{"location":"terraform/validators/listvalidator/","title":"ListValidator","text":"<p>List validator are used to validate the plan of a list attribute. It will be used into the <code>Validators</code> field of the <code>schema.ListAttribute</code> struct.</p>"},{"location":"terraform/validators/listvalidator/#how-to-use-it","title":"How to use it","text":"<pre><code>import (\nflistvalidator \"github.com/FrangipaneTeam/terraform-plugin-framework-validators/listvalidator\"\n)\n</code></pre>"},{"location":"terraform/validators/listvalidator/#list-of-validators","title":"List of Validators","text":"<p>Every <code>string</code> validators are available for maps thanks to a generic validator provided by Hashicorp. See the section below for more details.</p> <ul> <li><code>RequireIfAttributeIsOneOf</code> - This validator is used to require the attribute if another attribute is one of the given values.</li> <li><code>RequireIfAttributeIsSet</code> - This validator is used to require the attribute if another attribute is set.</li> <li><code>NullIfAttributeIsOneOf</code> - This validator is used to verify the attribute value is null if another attribute is one of the given values.</li> <li><code>NullIfAttributeIsSet</code> - This validator is used to verify the attribute value is null if another attribute is set.</li> </ul>"},{"location":"terraform/validators/listvalidator/#special","title":"Special","text":"<ul> <li><code>Not</code> - This validator is used to negate the result of another validator.</li> </ul>"},{"location":"terraform/validators/listvalidator/#generic","title":"Generic","text":""},{"location":"terraform/validators/listvalidator/#string","title":"String","text":"<p>Hashicorp provides a generic validator for strings. It uses the validators already defined in string to validate a list of strings. It is available in the hashicorp stringvalidator package.</p> <p>Example of usage:</p> <pre><code>// Used within a Schema method of a DataSource, Provider, or Resource\n_ = schema.Schema{\nAttributes: map[string]schema.Attribute{\n\"example_attr\": schema.ListAttribute{\nElementType: types.StringType,\nRequired:    true,\nValidators: []validator.List{\n// Validate this List must contain string values which are at least 3 characters.\nlistvalidator.ValueStringsAre(fstringvalidator.IsUUID()),\n},\n},\n},\n}\n</code></pre>"},{"location":"terraform/validators/listvalidator/not/","title":"<code>Not</code>","text":"<p>Released in v1.0.0</p> <p>This validator is used to check if the validators passed as arguments are NOT met.</p>"},{"location":"terraform/validators/listvalidator/not/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"list_of\": schema.ListAttribute{\nOptional:            true,\nMarkdownDescription: \"List of ...\",\nValidators: []validator.List{\nflistvalidator.Not(listvalidator.Between(10,20))\n},\n},\n</code></pre>"},{"location":"terraform/validators/mapvalidator/","title":"MapValidator","text":"<p>Map validator are used to validate the plan of a map attribute. It will be used into the <code>Validators</code> field of the <code>schema.MapAttribute</code> struct.</p>"},{"location":"terraform/validators/mapvalidator/#how-to-use-it","title":"How to use it","text":"<pre><code>import (\nfmapvalidator \"github.com/FrangipaneTeam/terraform-plugin-framework-validators/mapvalidator\"\n)\n</code></pre>"},{"location":"terraform/validators/mapvalidator/#list-of-validators","title":"List of Validators","text":"<p>Every <code>string</code> validators are available for maps thanks to a generic validator provided by Hashicorp. See the section below for more details.</p> <ul> <li><code>RequireIfAttributeIsOneOf</code> - This validator is used to require the attribute if another attribute is one of the given values.</li> <li><code>RequireIfAttributeIsSet</code> - This validator is used to require the attribute if another attribute is set.</li> <li><code>NullIfAttributeIsOneOf</code> - This validator is used to verify the attribute value is null if another attribute is one of the given values.</li> <li><code>NullIfAttributeIsSet</code> - This validator is used to verify the attribute value is null if another attribute is set.</li> </ul>"},{"location":"terraform/validators/mapvalidator/#special","title":"Special","text":"<ul> <li><code>Not</code> - This validator is used to negate the result of another validator.</li> </ul>"},{"location":"terraform/validators/mapvalidator/#generic","title":"Generic","text":""},{"location":"terraform/validators/mapvalidator/#string","title":"String","text":"<p>Hashicorp provides a generic validator for strings. It uses the validators already defined in string to validate a list of strings. It is available in the hashicorp stringvalidator package.</p> <p>Example of usage:</p> <pre><code>    // Used within a Schema method of a DataSource, Provider, or Resource\n_ = schema.Schema{\nAttributes: map[string]schema.Attribute{\n\"example_attr\": schema.MapAttribute{\nElementType: types.StringType,\nRequired:    true,\nValidators: []validator.Map{\n// Validate this Map must contain string values which are at least 3 characters.\nmapvalidator.ValueStringsAre(fstringvalidator.IsUUID()),\n},\n},\n},\n}\n</code></pre>"},{"location":"terraform/validators/mapvalidator/not/","title":"<code>Not</code>","text":"<p>Released in v1.0.0</p> <p>This validator is used to check if the validators passed as arguments are NOT met.</p>"},{"location":"terraform/validators/mapvalidator/not/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"map_of\": schema.MapAttribute{\nOptional:            true,\nMarkdownDescription: \"Map of ...\",\nValidators: []validator.Map{\nfmapvalidator.Not(mapvalidator.Between(10,20))\n},\n},\n</code></pre>"},{"location":"terraform/validators/setvalidator/","title":"SetValidator","text":"<p>Set validator are used to validate the plan of a set attribute. It will be used into the <code>Validators</code> field of the <code>schema.SetAttribute</code> struct.</p>"},{"location":"terraform/validators/setvalidator/#how-to-use-it","title":"How to use it","text":"<pre><code>import (\nfsetvalidator \"github.com/FrangipaneTeam/terraform-plugin-framework-validators/setvalidator\"\n)\n</code></pre>"},{"location":"terraform/validators/setvalidator/#list-of-validators","title":"List of Validators","text":"<p>Every <code>string</code> validators are available for maps thanks to a generic validator provided by Hashicorp. See the section below for more details.</p> <ul> <li><code>RequireIfAttributeIsOneOf</code> - This validator is used to require the attribute if another attribute is one of the given values.</li> <li><code>RequireIfAttributeIsSet</code> - This validator is used to require the attribute if another attribute is set.</li> <li><code>NullIfAttributeIsOneOf</code> - This validator is used to verify the attribute value is null if another attribute is one of the given values.</li> <li><code>NullIfAttributeIsSet</code> - This validator is used to verify the attribute value is null if another attribute is set.</li> </ul>"},{"location":"terraform/validators/setvalidator/#special","title":"Special","text":"<ul> <li><code>Not</code> - This validator is used to negate the result of another validator.</li> </ul>"},{"location":"terraform/validators/setvalidator/#generic","title":"Generic","text":""},{"location":"terraform/validators/setvalidator/#string","title":"String","text":"<p>Hashicorp provides a generic validator for strings. It uses the validators already defined in string to validate a list of strings. It is available in the hashicorp stringvalidator package.</p> <p>Example of usage:</p> <pre><code>_ = schema.Schema{\nAttributes: map[string]schema.Attribute{\n\"example_attr\": schema.SetAttribute{\nElementType: types.StringType,\nRequired:    true,\nValidators: []validator.Set{\n// Validate this Set must contain string values which are URNs.\nsetvalidator.ValueStringsAre(fstringvalidator.IsURN())\n},\n},\n},\n}\n</code></pre>"},{"location":"terraform/validators/setvalidator/not/","title":"<code>Not</code>","text":"<p>Released in v1.0.0</p> <p>This validator is used to check if the validators passed as arguments are NOT met.</p>"},{"location":"terraform/validators/setvalidator/not/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"set_of\": schema.SetAttribute{\nOptional:            true,\nMarkdownDescription: \"Set of ...\",\nValidators: []validator.Set{\nfsetvalidator.Not(setvalidator.Between(10,20))\n},\n},\n</code></pre>"},{"location":"terraform/validators/stringvalidator/","title":"StringValidator","text":"<p>String validator are used to validate the plan of a string attribute. It will be used into the <code>Validators</code> field of the <code>schema.StringAttribute</code> struct.</p>"},{"location":"terraform/validators/stringvalidator/#how-to-use-it","title":"How to use it","text":"<pre><code>import (\nfstringvalidator \"github.com/FrangipaneTeam/terraform-plugin-framework-validators/stringvalidator\"\n)\n</code></pre>"},{"location":"terraform/validators/stringvalidator/#list-of-validators","title":"List of Validators","text":"<ul> <li><code>RequireIfAttributeIsOneOf</code> - This validator is used to require the attribute if another attribute is one of the given values.</li> <li><code>RequireIfAttributeIsSet</code> - This validator is used to require the attribute if another attribute is set.</li> <li><code>NullIfAttributeIsOneOf</code> - This validator is used to verify the attribute value is null if another attribute is one of the given values.</li> <li><code>NullIfAttributeIsSet</code> - This validator is used to verify the attribute value is null if another attribute is set.</li> <li><code>OneOfWithDescription</code> - This validator is used to check if the string is one of the given values and format the description and the markdown description.</li> </ul>"},{"location":"terraform/validators/stringvalidator/#network","title":"Network","text":"<ul> <li><code>IsNetwork</code> - This validator is a generic validator for checking if the string is a valid network format.</li> <li><code>IsIP</code> - (DEPRECATED) This validator is used to check if the string is a valid IP address.</li> <li><code>IsNetmask</code> - This validator is used to check if the string is a valid netmask.</li> <li><code>IsMacAddress</code> - This validator is used to check if the string is a valid MAC address.</li> </ul>"},{"location":"terraform/validators/stringvalidator/#string","title":"String","text":"<ul> <li><code>IsURN</code> - This validator is used to check if the string is a valid URN.</li> <li><code>IsUUID</code> - This validator is used to check if the string is a valid UUID.</li> <li><code>PrefixContains</code> - This validator is used to check if the string contains prefix in the given value.</li> </ul>"},{"location":"terraform/validators/stringvalidator/#special","title":"Special","text":"<ul> <li><code>Not</code> - This validator is used to negate the result of another validator.</li> </ul>"},{"location":"terraform/validators/stringvalidator/isip/","title":"<code>IsIP</code>","text":"<p>Deprecated</p> <p>Use IsNetwork instead.</p> <p>This validator is used to check if the string is a valid IP address.</p>"},{"location":"terraform/validators/stringvalidator/isip/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"ip_address\": schema.StringAttribute{\nOptional:            true,\nMarkdownDescription: \"IPV4 for ...\",\nValidators: []validator.String{\nfstringvalidator.IsIP()\n},\n},\n</code></pre>"},{"location":"terraform/validators/stringvalidator/ismacaddress/","title":"<code>IsMacAddress</code>","text":"<p>Released in v1.2.0</p> <p>This validator is used to check if the string is a valid Mac Address.</p>"},{"location":"terraform/validators/stringvalidator/ismacaddress/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"mac_address\": schema.StringAttribute{\nOptional:            true,\nMarkdownDescription: \"Mac Adresse for ...\",\nValidators: []validator.String{\nfstringvalidator.IsMacAddress()\n},\n},\n</code></pre>"},{"location":"terraform/validators/stringvalidator/isnetmask/","title":"<code>IsNetmask</code>","text":"<p>Released in v1.1.0</p> <p>This validator is used to check if the string is a valid netmask.</p>"},{"location":"terraform/validators/stringvalidator/isnetmask/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"netmask\": schema.StringAttribute{\nOptional:            true,\nMarkdownDescription: \"Netmask for ...\",\nValidators: []validator.String{\nfstringvalidator.IsValidNetmask()\n},\n},\n</code></pre>"},{"location":"terraform/validators/stringvalidator/isnetwork/","title":"<code>IsNetwork</code>","text":"<p>Released in v1.8.0</p> <p>This validator is a generic validator for checking if the string is a valid network format.</p> <p>Some network formats are :</p>"},{"location":"terraform/validators/stringvalidator/isnetwork/#how-to-use-it","title":"How to use it","text":"<p>The validator takes a list of NetworkValidatorType and a boolean as argument.</p> <p>The list can contain one or more of the following values:</p> <ul> <li><code>IPV4</code> - Check if the string is a valid IPV4 address.</li> <li><code>IPV4WithCIDR</code> - Check if the string is a valid IPV4 address with CIDR.</li> <li><code>IPV4WithNetmask</code>- Check if the string is a valid IPV4 address with netmask.</li> <li><code>IsRFC1918</code> - Check if the string is a valid RFC1918 address.</li> </ul> <p>The boolean is used to define if the value must be at least one of the network types.</p>"},{"location":"terraform/validators/stringvalidator/isnetwork/#example-or","title":"Example OR","text":"<p>The following example will check if the string is a valid IPV4 address with CIDR or a valid IPV4 address with netmask.</p> <pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"ip_address\": schema.StringAttribute{\nOptional:            true,\nMarkdownDescription: \"IPV4 for ...\",\nValidators: []validator.String{\nfstringvalidator.IsNetwork([]fstringvalidator.NetworkValidatorType{\nfstringvalidator.IPV4WithCIDR,\nfstringvalidator.IPV4WithNetmask,\n}, true)\n},\n},\n</code></pre>"},{"location":"terraform/validators/stringvalidator/isnetwork/#example-and","title":"Example AND","text":"<p>The following example will check if the string is a valid IPV4 and a valid RFC1918 address.</p> <pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"ip_address\": schema.StringAttribute{\nOptional:            true,\nMarkdownDescription: \"IPV4 for ...\",\nValidators: []validator.String{\nfstringvalidator.IsNetwork([]fstringvalidator.NetworkValidatorType{\nfstringvalidator.IPV4,\nfstringvalidator.IsRFC1918,\n}, false)\n},\n},\n</code></pre>"},{"location":"terraform/validators/stringvalidator/isurn/","title":"<code>IsURN</code>","text":"<p>Released in v1.1.0</p> <p>This validator is used to check if the string is a valid URN.</p>"},{"location":"terraform/validators/stringvalidator/isurn/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"vm_id\": schema.StringAttribute{\nOptional:            true,\nMarkdownDescription: \"The VM ID for ...\",\nValidators: []validator.String{\nfstringvalidator.IsValidURN()\n},\n},\n</code></pre>"},{"location":"terraform/validators/stringvalidator/isuuid/","title":"<code>IsUUID</code>","text":"<p>Released in v1.1.0</p> <p>This validator is used to check if the string is a valid (v4) UUID.</p>"},{"location":"terraform/validators/stringvalidator/isuuid/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"vm_id\": schema.StringAttribute{\nOptional:            true,\nMarkdownDescription: \"The VM ID for ...\",\nValidators: []validator.String{\nfstringvalidator.IsValidUUID()\n},\n},\n</code></pre>"},{"location":"terraform/validators/stringvalidator/not/","title":"<code>Not</code>","text":"<p>Released in v1.0.0</p> <p>This validator is used to check if the validators passed as arguments are NOT met.</p>"},{"location":"terraform/validators/stringvalidator/not/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"ip_address\": schema.StringAttribute{\nOptional:            true,\nMarkdownDescription: \"IPV4 for ...\",\nValidators: []validator.String{\nfstringvalidator.Not(fstringvalidator.IsValidIP())\n},\n},\n</code></pre>"},{"location":"terraform/validators/stringvalidator/oneofwithdescription/","title":"<code>OneOfWithDescription</code>","text":"<p>Released in v1.5.0</p> <p>This validator is used to check if the string is one of the given values and format the description and the markdown description.</p>"},{"location":"terraform/validators/stringvalidator/oneofwithdescription/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"interface_type\": schema.StringAttribute{\nOptional:            true,\nMarkdownDescription: \"Type of ...\",\nValidators: []validator.String{\nfstringvalidator.OneOfWithDescription(\nfstringvalidator.OneOfWithDescriptionValues{\nValue:       \"VMXNET3\",\nDescription: \"Vmware interface\",\n},\nfstringvalidator.OneOfWithDescriptionValues{\nValue:       \"E1000E\",\nDescription: \"Intel interface\",\n},\n)\n},\n},\n</code></pre>"},{"location":"terraform/validators/stringvalidator/oneofwithdescription/#description-and-markdown-description","title":"Description and Markdown description","text":"<ul> <li>Description: Value must be one of: \"VMXNET3\" (Vmware interface), \"E1000E\" (Intel interface)</li> <li>Markdown description: Value must be one of: <code>VMXNET3</code> (Vmware interface), <code>E1000E</code> (Intel interface)</li> </ul>"},{"location":"terraform/validators/stringvalidator/prefixcontains/","title":"<code>PrefixContains</code>","text":"<p>Released in v1.7.0</p> <p>This validator is used to check if the string contains prefix in the given value.</p>"},{"location":"terraform/validators/stringvalidator/prefixcontains/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"interface_type\": schema.StringAttribute{\nOptional:            true,\nMarkdownDescription: \"Type of ...\",\nValidators: []validator.String{\nfstringvalidator.PrefixContains(\"urn:test:demo:\")\n},\n},\n</code></pre>"},{"location":"terraform/validators/stringvalidator/prefixcontains/#description-and-markdown-description","title":"Description and Markdown description","text":"<ul> <li>Description: must start with \"urn:test:demo:\"</li> <li>Markdown description: This value must start with <code>urn:test:demo:</code>.</li> </ul>"}]}